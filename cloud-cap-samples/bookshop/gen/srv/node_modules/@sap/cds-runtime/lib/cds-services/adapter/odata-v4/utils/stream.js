const cds = require('../../../../cds')
const { SELECT } = cds.ql
const { adaptStreamCQN } = require('../../../../fiori/utils/handler')
const cqn2cqn4sql = require('../../../../common/utils/cqn2cqn4sql')
const { findCsnTargetFor } = require('../../../../common/utils/csn')
const isStreaming = segments => {
  const lastSegment = segments[segments.length - 1]
  return (
    segments.length > 1 &&
    lastSegment.getKind() === 'PRIMITIVE.PROPERTY' &&
    lastSegment.getProperty().getType().getName() === 'Stream'
  )
}

const _getType = async (property, req) => {
  // REVISIT DRAFT HANDLING: cqn2cqn4sql should not happen here, but adaptStreamCQN relies on exists clause
  const cqn = cqn2cqn4sql(SELECT.from(req.query.SELECT.from), req._model).columns([property])

  adaptStreamCQN(cqn)

  try {
    const res = await cds.tx(req).run(cqn)
    return res.length !== 0 ? res[0][property] : undefined
  } catch (e) {
    // REVISIT: why ignore?
  }
}

const getContentType = (segments, srv, req) => {
  // REVISIT: we need to read direcly from db, which might not be there!
  if (!cds.db) return Promise.resolve()

  const propertyName = segments[segments.length - 1].getProperty().getName()

  let propertyType, entityName, namespace
  if (segments[segments.length - 2].getKind() === 'ENTITY') {
    entityName = segments[segments.length - 2].getEntitySet().getName()
    namespace = segments[segments.length - 2].getEdmType().getFullQualifiedName().namespace
  } else if (segments[segments.length - 2].getKind() === 'NAVIGATION.TO.ONE') {
    entityName = segments[segments.length - 2].getTarget().getName()
    namespace = segments[segments.length - 2].getTarget().getEntityType().getFullQualifiedName().namespace
  }

  if (entityName) {
    const entityDefinition = findCsnTargetFor(entityName, srv.model, namespace)
    if (entityDefinition._hasPersistenceSkip) return Promise.resolve()

    propertyType = entityDefinition.elements[`${propertyName}`]['@Core.MediaType']
    if (typeof propertyType === 'object') return _getType(Object.values(propertyType)[0], req)
  }

  return Promise.resolve(propertyType)
}

module.exports = {
  isStreaming,
  getContentType
}
