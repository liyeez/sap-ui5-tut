// Central registry for messages.

'use strict';

/**
 * Central register of messages and their configuration.
 * Group by id-category.
 *
 * configurableFor: 'deprecated' = severity can only be changed with deprecated.downgradableErrors
 *
 * @type {Object<string, MessageConfig>}
 */
const centralMessages = {
  'anno-definition':        { severity: 'Warning' },
  'anno-duplicate':         { severity: 'Error', configurableFor: true }, // does not hurt us
  'anno-duplicate-unrelated-layer': { severity: 'Error', configurableFor: true }, // does not hurt us
  'anno-undefined-action':  { severity: 'Info' },
  'anno-undefined-art':     { severity: 'Info' }, // for annotate statement (for CDL path root)
  'anno-undefined-def':     { severity: 'Info' }, // for annotate statement (for CSN or CDL path cont)
  'anno-undefined-element': { severity: 'Info' },
  'anno-undefined-param':   { severity: 'Info' },

  'args-expected-named':  { severity: 'Error', configurableFor: 'deprecated' }, // future --sloppy
  'args-no-params':       { severity: 'Error', configurableFor: 'deprecated' }, // future --sloppy
  'args-undefined-param': { severity: 'Error', configurableFor: 'deprecated' }, // future --sloppy

  'assoc-in-array': { severity: 'Error', configurableFor: 'deprecated' }, // not supported yet
  'assoc-as-type':  { severity: 'Error', configurableFor: 'deprecated' }, // TODO: allow more, but not all

  'check-proper-type':    { severity: 'Error', configurableFor: [ 'compile' ] },
  'check-proper-type-of': { severity: 'Info',  errorFor: [ 'for.odata', 'to.edmx' ] },

  'expr-no-filter': { severity: 'Error', configurableFor: 'deprecated' },

  'empty-entity': { severity: 'Info', errorFor: [ 'forHana' ] },
  'empty-type':   { severity: 'Info' }, // only still an error in old transformers

  // Structured types were warned about but made CSN un-recompilable.
  'enum-invalid-type': { severity: 'Error', configurableFor: 'deprecated' },

  // TODO: rename to ref-expected-XYZ
  'expected-type': { severity: 'Error' },
  'ref-sloppy-type': { severity: 'Error' },
  'ref-invalid-typeof': { severity: 'Error', configurableFor: 'deprecated' }, // TODO: make it non-config
  'expected-actionparam-type': { severity: 'Error' },
  'ref-sloppy-actionparam-type': { severity: 'Error' },
  'expected-event-type': { severity: 'Error' },
  'ref-sloppy-event-type': { severity: 'Error' },
  'expected-struct': { severity: 'Error' },
  'expected-const': { severity: 'Error' },
  'expected-entity': { severity: 'Error' },
  'expected-source': { severity: 'Error' },
  'expected-target': { severity: 'Error' },
  'ref-sloppy-target': { severity: 'Warning' },

  'extend-repeated-intralayer': { severity: 'Warning' },
  'extend-unrelated-layer':     { severity: 'Warning' },

  'param-default': { severity: 'Error', configurableFor: 'deprecated' }, // not supported yet

  'query-undefined-element': { severity: 'Error' },

  'recalculated-localized': { severity: 'Info' }, // KEEP: Downgrade in lib/transform/translateAssocsToJoins.js
  'redirected-implicitly-ambiguous': { severity: 'Error', configurableFor: true }, // does not hurt us

  'ref-autoexposed': { severity: 'Error', configurableFor: 'deprecated' },
  'ref-undefined-art':    { severity: 'Error' }, // TODO: Remove if shared.js uses makeMessageFunction()
  'ref-undefined-def':    { severity: 'Error' },
  'ref-undefined-var':    { severity: 'Error' },
  'ref-undefined-typeof': { severity: 'Error' },
  'ref-undefined-element': { severity: 'Error' },
  'ref-obsolete-parameters': { severity: 'Error', configurableFor: true }, // does not hurt us
  'ref-undefined-param': { severity: 'Error' },
  'ref-rejected-on': { severity: 'Error' },

  'rewrite-key-not-covered-explicit': { severity: 'Error', configurableFor: 'deprecated' },
  'rewrite-key-not-covered-implicit': { severity: 'Error', configurableFor: 'deprecated' },
  'rewrite-key-not-matched-explicit': { severity: 'Error', configurableFor: 'deprecated' },
  'rewrite-key-not-matched-implicit': { severity: 'Error', configurableFor: 'deprecated' },
  'rewrite-key-for-unmanaged': { severity: 'Error', configurableFor: 'deprecated' },
  'rewrite-not-supported': { severity: 'Error' },
  'rewrite-on-for-managed': { severity: 'Error', configurableFor: 'deprecated' },

  'service-nested-context': { severity: 'Error', configurableFor: true }, // does not hurt compile, TODO
  'service-nested-service': { severity: 'Error', configurableFor: 'deprecated' }, // not supported yet

  'syntax-anno-after-enum':   { severity: 'Error', configurableFor: true }, // does not hurt
  'syntax-anno-after-params': { severity: 'Error', configurableFor: true }, // does not hurt
  'syntax-anno-after-struct': { severity: 'Error', configurableFor: true }, // does not hurt
  'syntax-csn-unexpected-property': { severity: 'Error', configurableFor: true }, // is the removed
  'syntax-deprecated-ident': { severity: 'Error', configurableFor: true },
  'syntax-fragile-alias': { severity: 'Error', configurableFor: true },
  'syntax-fragile-ident': { severity: 'Error', configurableFor: true },

  'type-managed-composition': { severity: 'Error', configurableFor: 'deprecated' }, // TODO: non-config

  'unmanaged-as-key': { severity: 'Error', configurableFor: 'deprecated' }, // is confusing
  'composition-as-key': { severity: 'Error', configurableFor: 'deprecated' }, // is confusing and not supported
};

// For messageIds, where no text has been provided via code (central def)
const centralMessageTexts = {
  'syntax-csn-expected-object': 'Expected object for property $(PROP)',
  'syntax-csn-expected-column': 'Expected object or string \'*\' for property $(PROP)',
  'syntax-csn-expected-natnum': 'Expected non-negative number for property $(PROP)',
  'syntax-csn-expected-cardinality': 'Expected non-negative number or string \'*\' for property $(PROP)',
  'syntax-csn-expected-reference': 'Expected non-empty string or object for property $(PROP)',
  'syntax-csn-expected-term': 'Expected non-empty string or object for property $(PROP)',
  'syntax-anno-after-struct': 'Avoid annotation assignments after structure definitions',
  'syntax-anno-after-enum': 'Avoid annotation assignments after enum definitions',
  'syntax-anno-after-params': 'Avoid annotation assignments after parameters',
  'ref-undefined-def': {
    std: 'Artifact $(ART) has not been found',
    // TODO: proposal 'No definition of $(NAME) found',
    element: 'Artifact $(ART) has no element $(MEMBER)'
  },
  'ref-undefined-art': 'No artifact has been found with name $(NAME)',
  // TODO: proposal 'No definition found for $(NAME)',
  'ref-undefined-element': {
    std: 'Element $(ART) has not been found',
    element: 'Artifact $(ART) has no element $(MEMBER)'
  },
  'ref-rejected-on': {
    mixin: 'Do not refer to a mixin like $(ID) in the explicit ON of a redirection',
    alias: 'Do not refer to a source element (via table alias $(ID)) in the explicit ON of a redirection',
  },
  'anno-undefined-def': 'Artifact $(ART) has not been found',
  'anno-undefined-art': 'No artifact has been found with name $(NAME)',
  'anno-undefined-element': {
    std: 'Element $(ART) has not been found',
    element: 'Artifact $(ART) has no element $(MEMBER)',
    enum: 'Artifact $(ART) has no enum $(MEMBER)'
  },
  'anno-undefined-action': {
    std: 'Action $(ART) has not been found',
    action: 'Artifact $(ART) has no action $(MEMBER)'
  },
  'anno-undefined-param': {
    std: 'Parameter $(ART) has not been found',
    param: 'Artifact $(ART) has no parameter $(MEMBER)'
  },
  // TODO: rename to ref-expected-XYZ
  'expected-const': 'A constant value is expected here',
  'expected-struct': 'A type, entity, aspect or event with direct elements is expected here',
  'expected-context': 'A context or service is expected here',
  'expected-type': 'A type or an element is expected here',
  'ref-sloppy-type': 'A type or an element is expected here',
  'expected-actionparam-type': 'A type, an element, or a service entity is expected here',
  'ref-sloppy-actionparam-type': 'A type, an element, or a service entity is expected here',
  'expected-event-type': 'A type, an element, an event, or a service entity is expected here',
  'ref-sloppy-event-type': 'A type, an element, an event, or a service entity is expected here',
  'expected-entity': 'An entity, projection or view is expected here',
  // TOODO: text variant if the association does not start an an entity
  'expected-source': 'A query source must be an entity or an association',
  'expected-target': 'An entity or an aspect is expected here',
  'ref-sloppy-target': 'An entity or an aspect (not type) is expected here',

  'i18n-different-value': 'Different translation for key $(PROP) of language $(OTHERPROP) in unrelated layers'
}

/**
 * Configuration for a message in the central message register.
 *
 * @typedef {object} MessageConfig
 * @property {CSN.MessageSeverity} severity Default severity for the message.
 * @property {string[]|'deprecated'|true} [configurableFor]
 *        Whether the error can be reclassified to a warning or lower.
 *        If not `true` then an array is expected with specified modules in which the error is downgradable.
 *        Only has an effect if default severity is 'Error'.
 *        'deprecated': severity can only be changed with deprecated.downgradableErrors.
 *        TODO: Value `true` is temporary. Use an array instead.
 * @property {string[]} [errorFor] Array of module names where the message shall be reclassified to an error.
 * @property {boolean} [throughMessageCall]
 *        If set, it means that a message-id was added to the registry in test-mode through a `message.<severity>()`
 *        call.  Used for ensuring that all calls with the same message-id have the same severity.
 */

module.exports = { centralMessages, centralMessageTexts };
