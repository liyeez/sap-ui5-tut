// Functions and classes for syntax messages

'use strict';

const term = require('../utils/term');
const { normalizeLocation } = require('./location');
const { isDeprecatedEnabled } = require('./model');
const { centralMessages, centralMessageTexts } = require('./message-registry');
const { constructSemanticLocationFromCsnPath } = require('./location');
const { copyPropIfExist } = require('../utils/objectUtils');
const _messageIdsWithExplanation = require('../../share/messages/message-explanations.json').messages;

const fs = require('fs');
const path = require('path');


// Functions ensuring message consistency during runtime with --test-mode

let test$severities = null;
let test$texts = null;

function test$initSeverities( [id, spec] ) {
  test$severities[id] = { compiler: spec.severity };
  for (const module of spec.errorFor || [])
    test$severities[id][module] = 'Error';
}

function test$initTexts( [id, texts] ) {
  test$texts[id] = (typeof texts === 'string') ? { std: texts } : { ...texts };
}

function test$compare( dict, id, prop, value, where ) {
  if (!dict[id])
    dict[id] = Object.create(null);
  const expected = dict[id][prop];
  if (!expected)
    dict[id][prop] = value;
  else if (expected !== value)
    throw new Error( `Message-${where}.${id}.${prop}: expected "${expected}", not "${value}` );
}

/**
 * Returns true if at least one of the given messages is of severity "Error"
 * @param {CSN.Message[]} messages
 * @returns {boolean}
 */
function hasErrors( messages ) {
  return messages && messages.some( m => m.severity === 'Error' );
}

/**
 * Returns true if at least one of the given messages is of severity "Error"
 * and *cannot* be reclassified to a warning.
 *
 * @param {CSN.Message[]} messages
 * @param {string} moduleName
 * @returns {boolean}
 */
function hasNonDowngradableErrors( messages, moduleName ) {
  return messages && messages.some( m => m.severity === 'Error' &&
      (!m.messageId || !isDowngradable( m.messageId, moduleName )));
}

/**
 * Returns true if the given message id exist in the central message register and is
 * downgradable, i.e. an error can be reclassified to a warning or lower.
 * Returns false if the messages is an errorFor the given moduleName.
 *
 * @param {string} messageId
 * @param {string} moduleName
 * @returns {boolean}
 */
function isDowngradable( messageId, moduleName ) {
  if (!centralMessages[messageId])
    return false;

  const msg = centralMessages[messageId];
  return (!msg.errorFor || !msg.errorFor.includes(moduleName)) &&
      (msg.severity !== 'Error' ||
        msg.configurableFor === true || // useful with error for syntax variants
        msg.configurableFor && msg.configurableFor.includes( moduleName ));
}

/**
 * Return gnu-style error string for location `loc`:
 *  - 'File:Line:Col' without `loc.end`
 *  - 'File:Line:StartCol-EndCol' if Line = start.line = end.line
 *  - 'File:StartLine.StartCol-EndLine.EndCol' otherwise
 *
 * @param {CSN.Location|CSN.Location} location
 * @param {boolean} [normalizeFilename]
 */
function locationString( location, normalizeFilename ) {
  if (!location)
    return '<???>';
  const loc = normalizeLocation( location );
  let filename = (loc.file && normalizeFilename)
      ? loc.file.replace( /\\/g, '/' )
      : loc.file;
  if (!(loc instanceof Object))
    return loc;
  if (!loc.line) {
    return filename;
  }
  else if (!loc.endLine) {
    return (loc.col)
      ? `${filename}:${loc.line}:${loc.col}`
      : `${filename}:${loc.line}`;
  }
  else {
    return (loc.line === loc.endLine)
      ? `${filename}:${loc.line}:${loc.col}-${loc.endCol}`
      : `${filename}:${loc.line}.${loc.col}-${loc.endLine}.${loc.endCol}`;
  }
}

/**
 * Class for combined compiler errors.  Additional members:
 *   `errors`: vector of errors (CompileMessage and errors from peg.js)
 *   `model`: the CSN model
 * TODO: standard param order
 * @class CompilationError
 * @extends {Error}
 */
class CompilationError extends Error {
  /**
   * Creates an instance of CompilationError.
   * @param {array} messages vector of errors
   * @param {XSN.Model} [model] the XSN model, only to be set with options.attachValidNames
   * @param {string} [text] Text of the error
   * @param {any} args Any args to pass to the super constructor
   *
   * @memberOf CompilationError
   */
  constructor(messages, model, text, ...args) {
    super( text || 'CDS compilation failed\n' + messages.map( m => m.toString() ).join('\n'),
          // @ts-ignore Error does not take more arguments according to TypeScript...
           ...args );
    this.messages = messages;

    /** @type {object} model */
    this.model;                   // TODO: what is this for?
    /** @type {boolean} model */
    this.hasBeenReported = false; // TODO: remove this bin/cdsc.js specifics
    // TODO: remove property `model`
    Object.defineProperty( this, 'model', { value: model || undefined, configurable: true } );
  }
  toString() {                  // does not really help -> set message
    return this.message.includes('\n')
      ? this.message
      : this.message + '\n' + this.errors.map( m => m.toString() ).join('\n');
  }
  get errors() {
    return this.messages;
  }
}

/**
 * Class for individual compile message.
 *
 * @class CompileMessage
 */
class CompileMessage {
  /**
   * Creates an instance of CompileMessage.
   * @param {any} location Location of the message
   * @param {string} msg The message text
   * @param {CSN.MessageSeverity} [severity='Error'] Severity: Debug, Info, Warning, Error
   * @param {string} [id] The ID of the message - visible as property messageId
   * @param {any} [home]
   *
   * @memberOf CompileMessage
   */
  constructor(location, msg, severity = 'Error', id = null, home = null, moduleName = null) {
    this.message = msg;
    this.location = normalizeLocation( location );
    this.$location = dollarLocation( this.location );
    this.validNames = null;
    if (home)                   // semantic location, e.g. 'entity:"E"/element:"x"'
      this.home = home;
    this.severity = severity;
    if (id)
      Object.defineProperty( this, 'messageId', { value: id } );
      // this.messageId = id;  // ids not yet finalized
    if (moduleName)
      Object.defineProperty( this, '$module', { value: moduleName } );
  }

  toString() {                  // should have no argument...
    return messageString( this, undefined, true ); // no message-id before finalization!
  }
}

/**
 * Temporary v1 function to convert an "old-style" location to "new-style".
 *
 * @param {CSN.Location} location
 * @return {CSN.Location}
 * @todo Remove
 */
function dollarLocation( location ) {
  const file  = location && location.file || undefined;
  if (!file)
    return {};
  const loc = {
    file,
    line: location.line,
    col: location.col,
    address: undefined,
  };
  copyPropIfExist(loc, 'endLine', location);
  copyPropIfExist(loc, 'endCol', location);
  // TODO:
  // return {
  //   ...location,
  //   address: undefined,
  // };
  return loc;
}

/**
 * Handle compiler messages, i.e. throw a compiler exception if there are errors.
 *
 * @param {object} model CSN or XSN
 * @param {CSN.Options} [options]
 * @deprecated Use throwWithError() from makeMessageFunction instead.
 */
function handleMessages( model, options = {} ) {
  const messages = options.messages;
  if (messages && messages.length) {
    if (hasErrors( messages ))
      throw new CompilationError( messages, options.attachValidNames && model );
  }
  return model;
}

const severitySpecs = {
  error: { name: 'Error', level: 0 },
  warning: { name: 'Warning', level: 1 },
  info: { name: 'Info', level: 2 },
  debug: { name: 'Debug', level: 3 },
};

/**
 * Reclassify the given message's severity using:
 *
 *  1. The specified severity: either centrally provided or via the input severity
 *     - when generally specified as 'Error', immediately return 'Error'
 *       if message is not specified as configurable (for the given module name)
 *     - when generally specified otherwise, immediately return 'Error'
 *       if message is specified as being an error for the given module name
 *  2. User severity wishes in option `severities`: when provided and no 'Error' has
 *     been returned according to 1, return the severity according to the user wishes.
 *  3. Otherwise, use the specified severity.
 *
 * @param {string} id
 * @param {CSN.MessageSeverity} severity
 * @param {object} severities
 * @param {string} moduleName
 * @returns {CSN.MessageSeverity}
 *
 * TODO: we should pass options as usual
 */
function reclassifiedSeverity( id, severity, severities, moduleName, deprecatedDowngradable ) {
  // The following is a bug workaround: the input severity (at least 'Error')
  // must be as provided centrally for that module - TODO: test with testMode,
  // probably also that error() is only used if message is always `Error` in that module
  if (severity === 'Error')
    return 'Error';
  const spec = centralMessages[id] || { severity };
  if (spec.severity === 'Error') {
    const { configurableFor } = spec;
    if (!(Array.isArray( configurableFor )
          ? configurableFor.includes( moduleName )
          : configurableFor && (configurableFor !== 'deprecated' || deprecatedDowngradable)))
      return 'Error';
  }
  else {
    const { errorFor } = spec;
    if (Array.isArray( errorFor ) && errorFor.includes( moduleName ))
      return 'Error';
  }
  return normalizedSeverity( severities[id] ) || spec.severity;
}

function normalizedSeverity( severity ) {
  if (typeof severity !== 'string')
    return (severity == null) ? null : 'Error';
  let s = severitySpecs[ severity.toLowerCase() ];
  return s ? s.name : 'Error';
}

/**
 * Reclassifies all messages according to the current module.
 * This is required because if throwWithError() throws and the message's
 * severities has `errorFor` set, then the message may still appear to be a warning.
 *
 * TODO: this actually likely needs to be called by the backend module at the beginning!
 *
 * @param {CSN.Message[]} messages
 * @param {object} severities
 * @param {string} moduleName
 */
function reclassifyMessagesForModule(messages, severities, moduleName, deprecatedDowngradable) {
  for (const msg of messages) {
    if (msg.messageId && msg.severity !== 'Error')
      msg.severity = reclassifiedSeverity(msg.messageId, msg.severity, severities, moduleName, deprecatedDowngradable);
  }
}

/**
 * Compare two severities.  Returns 0 if they are the same, and <0 if
 * `a` has a lower `level` than `b` according to {@link severitySpecs},
 * where "lower" means: comes first when sorted.
 *
 *   compareSeverities('Error', 'Info')  =>  Error < Info  =>  -1
 *
 * @param {CSN.MessageSeverity} a
 * @param {CSN.MessageSeverity} b
 * @see severitySpecs
 */
function compareSeverities( a, b ) {
  // default: low priority
  const aSpec = severitySpecs[a.toLowerCase()] || { level: 10 };
  const bSpec = severitySpecs[b.toLowerCase()] || { level: 10 };
  return aSpec.level - bSpec.level;
}

/**
 * @todo This was copied from somewhere just to make CSN paths work.
 * @param {CSN.Model} model
 * @param {CSN.Path} path
 */
function searchForLocation( model, path ) {
  if (!model)
    return null;
  // Don't display a location if we cannot find one!
  let lastLocation = null;
  /** @type {object} */
  let currentStep = model;
  for (const step of path) {
    if (!currentStep)
      return lastLocation;
    currentStep = currentStep[step];
    if (currentStep && currentStep.$location)
      lastLocation = currentStep.$location;
  }

  return lastLocation;
}

/**
 * Create the `message` function to emit messages.
 *
 * @example
 * ```
 *   const { makeMessageFunction } = require(‘../base/messages’);
 *   function module( …, options ) {
 *     const { message, info, throwWithError } = makeMessageFunction( model, options, moduleName );
 *     // [...]
 *     message( 'message-id', <location>, <text-arguments>, <severity>, <text> );
 *     info( 'message-id', <location>, [<text-arguments>,] <text> );
 *     // [...]
 *     throwWithError();
 *   }
 * ```
 * @param {object} model
 * @param {CSN.Options} [options]
 * @param {string} [moduleName]
 */
function makeMessageFunction( model, options = model.options || {}, moduleName = null ) {
  // ensure message consistency during runtime with --test-mode
  if (options.testMode && !options.severities && !test$severities) {
    test$severities = Object.create(null);
    test$texts = Object.create(null);
    Object.entries( centralMessages ).forEach( test$initSeverities );
    Object.entries( centralMessageTexts ).forEach( test$initTexts );
  }

  const hasMessageArray = !!options.messages;
  const severities = options.severities || {};
  const deprecatedDowngradable = isDeprecatedEnabled( options, 'downgradableErrors' );
  /**
   * Array of collected compiler messages. Only use it for debugging. Will not
   * contain the messages created during a `callTransparently` call.
   *
   * @type {CSN.Message[]}
   */
  let messages = options && options.messages || [];

  return {
    message, error, warning, info, debug,
    messages, throwWithError, callTransparently
  };

  function _message(id, location, textOrArguments, severity, texts = null) {
    _validateFunctionArguments(id, location, textOrArguments, severity, texts);

    // Special case for _info, etc.: textOrArguments may be a string.
    if (typeof textOrArguments === 'string') {
      texts = { std: textOrArguments };
      textOrArguments = {};
    }

    if (id) {
      _checkId(id, severity);
      severity = reclassifiedSeverity( id, severity, severities, moduleName, deprecatedDowngradable );
    }

    const [ fileLocation, semanticLocation, definition ] = _normalizeMessageLocation(location);
    const text = messageText( texts || centralMessageTexts[id], textOrArguments );

    /** @type {CSN.Message} */
    const msg = new CompileMessage( fileLocation, text, severity, id, semanticLocation, moduleName );
    if (options.internalMsg)
      msg.error = new Error( 'stack' );
    if (definition)
      msg.$location.address = { definition };

    messages.push( msg );
    if (!hasMessageArray)
      console.error( messageString( msg ) );

    // perform message consistency check during runtime with --test-mode
    if (options.testMode && !options.severities && !options.$recompile && id) {
      test$compare( test$severities, id, moduleName || '?', severity, 'severities' );
      for (const [variant, text] of
           Object.entries( (typeof texts === 'string') ? { std: texts } : texts || {} ))
        test$compare( test$texts, id, variant, text, 'texts' );
    }
    return msg;
  }

  /**
   * Validate the arguments for the message() function. This is needed during the transition
   * to the new makeMessageFunction().
   */
  function _validateFunctionArguments(id, location, textArguments, severity, texts) {
    if (!options.testMode)
      return;

    if (id !== null && typeof id !== 'string')
      _expectedType('id', id, 'string')

    if (location !== null && location !== undefined && !Array.isArray(location) && typeof location !== 'object')
      _expectedType('location', location, 'XSN/CSN location, CSN path')

    if (severity != null && typeof severity !== 'string')
      _expectedType('severity', severity, 'string')

    const isShortSignature = (typeof textArguments === 'string') // textArguments => texts

    if (isShortSignature) {
      if (texts)
        throw new Error('No "texts" argument expected because text was already provided as third argument.');
    } else {
      if (textArguments !== undefined && typeof textArguments !== 'object')
        _expectedType('textArguments', textArguments, 'object')
      if (texts !== undefined && typeof texts !== 'object' && typeof texts !== 'string')
        _expectedType('texts', texts, 'object or string')
    }

    function _expectedType(field, value, type) {
      throw new Error(`Invalid argument type for ${ field }! Expected ${ type } but got ${ typeof value }. Do you use the old function signature?`);
    }
  }

  /**
   * Normalize the given location. Location may be a CSN path, XSN/CSN location or an
   * array of the form `[CSN.Location, user, suffix]`.
   *
   * @param {any} location
   * @returns {[CSN.Location, string, string]} Location, semantic location and definition.
   */
  function _normalizeMessageLocation(location) {
    if (!location)
      // e.g. for general messages unrelated to code
      return [ null, null, null ]

    if (typeof location === 'object' && !Array.isArray(location))
      // CSN/CSN.Location (with line/endLine, col/endCol)
      return [ normalizeLocation(location), location.home || null, null ]

    const isCsnPath = (typeof location[0] === 'string');
    if (isCsnPath) {
      return [
        searchForLocation( model, location ),
        constructSemanticLocationFromCsnPath( location, model ),
        location[1] // location[0] is 'definitions'
      ];
    }

    let semanticLocation = location[1] ? homeName( location[1], false ) : null;
    if (location[2]) // optional suffix
      semanticLocation += '/' + location[2]

    const definition = location[1] ? homeName( location[1], true ) : null;

    // If no XSN location is given, check if we can use the one of the artifact
    let fileLocation = location[0];
    if (!fileLocation && location[1])
      fileLocation = location[1].location || location[1].$location || null;

    return [ fileLocation, semanticLocation, definition ];
  }

  /**
   * Check that the central message severity matches the given one.
   *
   * @param {string} id
   * @param {CSN.MessageSeverity} severity
   */
  function _checkId(id, severity) {
    if (!options.testMode || !severity)
      return;

    if (!centralMessages[id]) {
      centralMessages[id] = { severity, throughMessageCall: true };
    }
    else if (centralMessages[id].severity !== severity) {
      // TODO: Enable if getMessageFunction() is removed because that function
      // does message reclassification before calling _message();
      //
      // if (centralMessages[id].throughMessageCall) {
      //   throw new Error(`Mismatch for message '${ id }' between provided severity '${ severity }' and previous call with '${ centralMessages[id].severity }'`)
      // } else {
      //   throw new Error(`Mismatch for message '${ id }' between provided severity '${ severity }' and central one '${ centralMessages[id].severity }'`)
      // }
    }
  }

  /**
   * Create a compiler message for model developers.
   *
   * @param {string} id Message ID
   * @param {[CSN.Location, XSN.Artifact]|CSN.Path|CSN.Location|CSN.Location} location
   *            Either a (XSN/CSN-style) location, a tuple of file location
   *            and "user" (address) or a CSN path a.k.a semantic location path.
   * @param {object} [textArguments] Text parameters that are replaced in the texts.
   * @param {string|object} [texts]
   */
  function message(id, location, textArguments = null, texts = null) {
    if (!id)
      throw new Error('A message id is missing!');
    if (!centralMessages[id])
      throw new Error(`Message id '${ id }' is missing an entry in the central message register!`);
    return _message(id, location, textArguments, null, texts);
  }

  /**
   * Create a compiler error message.
   * @see message()
   */
  function error(id, location, textOrArguments = null, texts = null) {
    return _message(id, location, textOrArguments, 'Error', texts);
  }

  /**
   * Create a compiler warning message.
   * @see message()
   */
  function warning(id, location, textOrArguments = null, texts = null) {
    return _message(id, location, textOrArguments, 'Warning', texts);
  }

  /**
   * Create a compiler info message.
   * @see message()
   */
  function info(id, location, textOrArguments = null, texts = null) {
    return _message(id, location, textOrArguments, 'Info', texts);
  }

  /**
   * Create a compiler debug message (usually not shown).
   * @see message()
   */
  function debug(id, location, textOrArguments = null, texts = null) {
    return _message(id, location, textOrArguments, 'Debug', texts);
  }

  /**
   * Throws a CompilationError exception if there is at least one error message
   * in the model's messages after reclassifying existing messages according to
   * the module name.
   * If `--test-mode` is enabled, this function will only throw if the
   * error *cannot* be downgraded to a warning.  This is done to ensure that
   * developers do not rely on certain errors leading to an exception.
   *
   * @param {CSN.Message[]} [msgs] Which messages to check for. Default: The ones of
   *                               this makeMessageFunction() scope.
   */
  function throwWithError(msgs = messages) {
    if (!msgs || !msgs.length)
      return;
    reclassifyMessagesForModule(msgs, severities, moduleName); // TODO: no, at the beginning of the module
    const hasError = options.testMode ? hasNonDowngradableErrors : hasErrors;
    if (hasError( msgs, moduleName ))
      throw new CompilationError( msgs, options.attachValidNames && model );
  }

  /**
   * Collects all messages during the call of the callback function instead of
   * storing them in the model. Returns the collected messages.
   *
   * @param {Function} callback
   * @param  {...any} args
   * @returns {CSN.Message[]}
   */
  function callTransparently(callback, ...args) {
    const backup = messages;
    messages = [];
    callback(...args);
    const collected = messages;
    messages = backup;
    return collected;
  }
}

const quote = {                 // could be an option in the future
  name: n => `“${ n }”`,
  prop: p => `‘${ p }’`,
  file: f => `‘${ f }’`,
  code: c => `«${ c }»`,
  meta: m => `‹${ m }›`,
  // TODO: probably use keyword as function name, but its name would not have length 4 :-(
  word: w => w.toUpperCase(),   // keyword
}

const paramsTransform = {
  // simple convenience:
  name: quoted,
  id: quoted,
  alias: quoted,
  anno: a => (a.charAt(0) === '@' ? quote.name( a ) : quote.name( '@' + a )),
  delimited: n => '![' + n + ']',
  file: quote.file,
  prop: quote.prop,
  otherprop: quote.prop,
  code: quote.code,
  newcode: quote.code,
  kind: quote.meta,
  keyword: quote.word,
  // more complex convenience:
  names: transformManyWith( quoted ),
  art: transformArg,
  service: transformArg,
  sorted_arts: transformManyWith( transformArg, true ),
  target: transformArg,
  type: transformArg,
  offending: tokenSymbol,
  expecting: transformManyWith( tokenSymbol ),
  // msg: m => m,
};

function transformManyWith( t, sorted ) {
  return function transformMany( many, r, args, texts ) {
    const prop = ['none','one'][ many.length ];
    if (!prop || !texts[prop] || args['#'] ) {
      const names = many.map(t);
      return (sorted ? names.sort() : names).join(', ');
    }
    r['#'] = prop;              // text variant
    return many.length && t( many[0] );
  };
}

function quoted( name ) {
  return (name) ? quote.name( name ) : '<?>'; // TODO: failure in --test-mode, then remove
}

function tokenSymbol( token ) {
  if (token.match( /^[A-Z][A-Z]/ )) // keyword
    return quote.word( token );
  else if (token.match( /^[A-Z][a-z]/ )) // Number, Identifier, ...
    return quote.meta( token );
  if (token.startsWith("'") && token.endsWith("'")) // operator token symbol
    return quote.prop( token.slice( 1, -1 ));
  else if (token === '<EOF>')
    return quote.meta( token.slice( 1, -1 ) );
  else
    return quote.code( token ); // should not happen
}

function transformArg( arg, r, args, texts ) {
  if (!arg || typeof arg !== 'object')
    return quoted( arg );
  if (arg._artifact)
    arg = arg._artifact;
  if (arg._outer)
    arg = arg._outer;
  if (args['#'] || args.member )
    return shortArtName( arg );
  let name = arg.name;
  if (!name)
    return quoted( name );
  let prop = ['element','param','action','alias'].find( p => name[p] );
  if (!prop || !texts[prop] )
    return shortArtName( arg );
  r['#'] = texts[ name.$variant ] && name.$variant || prop; // text variant (set by searchName)
  r.member = quoted( name[prop] );
  return artName( arg, prop );
}

const nameProp = {
  enum: 'element',
  key: 'element',
  function: 'action',
};

function searchName( art, id, variant ) {
  if (!variant) {
    // used to mention the "effective" type in the message, not the
    // originally provided one (TODO: mention that in the message text)
    let type = art._effectiveType && art._effectiveType.kind !== 'undefined' ? art._effectiveType : art;
    if (type.elements) {        // only mentioned elements
      art = type.target && type.target._artifact || type;
      variant = 'element';
    }
    else {
      variant = 'absolute';
    }
  }
  let prop = nameProp[variant] || variant;
  let name = Object.assign( { $variant: variant }, (art._artifact||art).name );
  name[prop] = (name[prop]) ? name[prop] + '.' + id : id || '?';
  return { name, kind: art.kind };
}

function messageText( texts, params, transform ) {
  if (typeof texts === 'string')
    texts = { std: texts };
  let args = {};
  for (let p in params) {
    let t = transform && transform[p] || paramsTransform[p];
    args[p] = (t) ? t( params[p], args, params, texts ) : params[p];
  }
  let variant = args['#'];
  return replaceInString( variant && texts[ variant ] || texts.std, args );
}

function replaceInString( text, params ) {
  let pattern = /\$\(([A-Z_]+)\)/g;
  let parts = [];
  let start = 0;
  for (let p = pattern.exec( text ); p; p = pattern.exec( text )) {
    let prop = p[1].toLowerCase();
    parts.push( text.substring( start, p.index ),
                (prop in params ? params[prop] : p[0]) );
    delete params[prop];
    start = pattern.lastIndex;
  }
  parts.push( text.substring( start ) );
  let remain = ('#' in params) ? [] : Object.keys( params ).filter( n => params[n] );
  return (remain.length)
         ? parts.join('') + '; ' +
           remain.map( n => n.toUpperCase() + ' = ' + params[n] ).join(', ')
         : parts.join('');
}

/**
 * @param {CSN.Location} loc
 * @returns {CSN.Location}
 */
function weakLocation( loc ) {
  // no endLine/endCol
  return { file: loc.file, line: loc.line, col: loc.col };
}

/**
 * Return message string with location if present in compact form (i.e. one line)
 *
 * Example:
 *   <source>.cds:3:11: Error: cannot find value `nu` in this scope *
 *
 * @param {CSN.Message} err
 * @param {boolean} [normalizeFilename]
 * @param {boolean} [noMessageId]
 * @param {boolean} [noHome]
 * @returns {string}
 */
function messageString( err, normalizeFilename, noMessageId, noHome ) {
  return (err.$location && err.$location.file
          ? locationString( err.$location, normalizeFilename ) + ': '
          : '') +
         (err.severity||'Error') +
         // TODO: use [message-id]
         (err.messageId && !noMessageId ? ' ' + err.messageId + ': ' : ': ') +
         err.message +
         // even with noHome, print err.home if the location is weak
         (!err.home || noHome && err.$location && err.$location.endLine ? '' : ' (in ' + err.home + ')');
}

/**
 * Return message hash which is either the message string without the file location,
 * or the full message string if no semantic location is provided.
 *
 * @param {CSN.Message} msg
 * @returns {string} can be used to uniquely identify a message
 */
function messageHash(msg) {
  // parser messages do not provide semantic location, therefore we need to use the file location
  if(!msg.home)
    return messageString(msg);
  const copy = {...msg};
  copy.$location = undefined;
  return messageString(copy);
}

/**
 * Return message string with location if present.
 *
 * Example:
 *   Error: cannot find value `nu` in this scope
 *     <source>.cds:3:11, at entity:“E”
 *
 * @param {CSN.Message} err
 * @param {object} [config = {}]
 * @param {boolean} [config.normalizeFilename] Replace windows `\` with forward slashes `/`.
 * @param {boolean} [config.noMessageId]
 * @param {boolean} [config.hintExplanation] If true, messages with explanations will get a "…" marker.
 * @param {boolean} [config.withLineSpacer] If true, an additional line (with `|`) will be inserted between message and location.
 * @returns {string}
 */
function messageStringMultiline( err, config = {} ) {
  const explainHelp = (config.hintExplanation && hasMessageExplanation(err.messageId)) ? '…' : '';
  const msgId = (err.messageId && !config.noMessageId) ? `[${ err.messageId }${ explainHelp }]` : '';
  const home = !err.home ? '' : ('at ' + err.home);
  const severity = err.severity || 'Error';

  let location = '';
  if (err.$location && err.$location.file) {
    location += locationString( err.$location, config.normalizeFilename )
    if (home)
      location += ', '
  }
  else if (!home)
    return term.asSeverity(severity, severity + msgId) + ' ' + err.message;

  let lineSpacer = '';
  if (config.withLineSpacer) {
    let additionalIndent = err.$location ? `${ err.$location.endLine || err.$location.line || 1 }`.length : 1;
    lineSpacer = `\n  ${ ' '.repeat( additionalIndent ) }|`;
  }

  // TODO: use ':' before text
  return term.asSeverity(severity, severity + msgId) + ': ' + err.message + lineSpacer + '\n  ' + location + home;
}

/**
 * Returns a context (code) string that is human readable (similar to rust's compiler)
 *
 * Example Output:
 *     |
 *   3 |     num * nu
 *     |           ^^
 *
 * @param {string[]} sourceLines The source code split up into lines, e.g. by `splitLines(src)`
 *                               from `lib/utils/file.js`
 * @param {CSN.Message} err Error object containing all details like line, message, etc.
 * @returns {string}
 */
function messageContext(sourceLines, err) {
  const MAX_COL_LENGTH = 100;

  const loc = normalizeLocation(err.$location);
  if (!loc || !loc.line) {
    return '';
  }

  // Lines are 1-based, we need 0-based ones for arrays
  const startLine = loc.line - 1;
  const endLine = loc.endLine ? loc.endLine - 1 : startLine;

  // check that source lines exists
  if (typeof sourceLines[startLine] !== 'string' || typeof sourceLines[endLine] !== 'string') {
    return '';
  }

  const digits = String(endLine + 1).length;
  const severity = err.severity || 'Error';
  const indent = ' '.repeat(2 + digits);

  // Columns are limited in width to avoid too long output.
  let startColumn = Math.min(MAX_COL_LENGTH, loc.col);
  // end column points to the place *after* the last character index,
  // e.g. for single character locations it is "start + 1"
  let endColumn = (loc.endCol && loc.endCol > loc.col) ? loc.endCol - 1 : loc.col;
  endColumn = Math.min(MAX_COL_LENGTH, endColumn);

  /** Only print N lines even if the error spans more lines. */
  const maxLine = Math.min((startLine + 2), endLine);

  let msg = indent + '|\n';

  // print source line(s)
  for (let line = startLine; line <= maxLine; line++) {
    // Replaces tabs with 1 space
    let sourceCode = sourceLines[line].replace(/\t/g, ' ');
    if (sourceCode.length >= MAX_COL_LENGTH)
      sourceCode = sourceCode.slice(0, MAX_COL_LENGTH);
    // Only prepend space if the line contains any sources.
    sourceCode = sourceCode.length ? ' ' + sourceCode : '';
    msg +=  ' ' + String(line + 1).padStart(digits, ' ') + ' |' + sourceCode + '\n';
  }

  if (startLine === endLine) {
    // highlight only for one-line location; at least one character is highlighted
    let highlighter = ' '.repeat(startColumn - 1).padEnd(endColumn, '^');
    // Indicate that the error is further to the right.
    if (endColumn == MAX_COL_LENGTH)
      highlighter = highlighter.replace('  ^', '..^');
    msg += indent + '| ' + term.asSeverity(severity, highlighter);

  } else if (maxLine !== endLine) {
    // error spans more lines which we don't print
    msg +=  indent + '| ...';

  } else {
    msg +=  indent + '|';
  }

  return msg;
}

/**
 * Compare two messages `a` and `b`. Return 0 if they are equal, 1 if `a` is
 * larger than `b`, and -1 if `a` is smaller than `b`. Messages without a location
 * are considered larger than messages with a location.
 *
 * @param {CSN.Message} a
 * @param {CSN.Message} b
 */
function compareMessage( a, b ) {
  const aFile = a.$location && a.$location.file;
  const bFile = b.$location && b.$location.file;
  if (aFile && bFile) {
    const aEnd = a.$location.endLine && a.$location.endCol && a.$location || { endLine: Number.MAX_SAFE_INTEGER, endCol: Number.MAX_SAFE_INTEGER };
    const bEnd = b.$location.endLine && b.$location.endCol && b.$location || { endLine: Number.MAX_SAFE_INTEGER, endCol: Number.MAX_SAFE_INTEGER };
    return ( c( aFile, bFile ) ||
             c( a.$location.line, b.$location.line ) ||
             c( a.$location.col, b.$location.col ) ||
             c( aEnd.endLine, bEnd.endLine ) ||
             c( aEnd.endCol, bEnd.endCol ) ||
             c( homeSortName( a ), homeSortName( b ) ) ||
             c( a.message, b.message ) );
  }
  else if (!aFile && !bFile)
    return ( c( homeSortName( a ), homeSortName( b ) ) ||
             c( a.message, b.message ) );
  else if (!aFile)
    return (a.messageId && a.messageId.startsWith( 'api-' )) ? -1 : 1;
  else
    return (b.messageId && b.messageId.startsWith( 'api-' )) ? 1 : -1;

  function c( x, y ) {
    return (x === y) ? 0 : (x > y) ? 1 : -1;
  }
}

/**
 * Compare two messages `a` and `b`.  Return 0 if they are equal in both their
 * location and severity, >0 if `a` is larger than `b`, and <0 if `a` is smaller
 * than `b`. See `compareSeverities()` for how severities are compared.
 *
 * @param {CSN.Message} a
 * @param {CSN.Message} b
 */
function compareMessageSeverityAware( a, b ) {
  const c = compareSeverities(a.severity, b.severity);
  return c || compareMessage( a, b );
}

/**
 * Return sort-relevant part of semantic location (after the ':').
 * Messages without semantic locations are considered smaller (for syntax errors)
 * and (currently - should not happen in v2) larger for other messages.
 *
 * @param {CSN.Message} msg
 */
function homeSortName( { home, messageId } ) {
  return (!home)
    ? (messageId && /^(syntax|api)-/.test( messageId ) ? ' ' + messageId : '~')
    : home.substring( home.indexOf(':') ); // i.e. starting with the ':', is always there
}

/**
 * Removes duplicate messages from the given messages array without destroying
 * references to the array.
 *
 * Does NOT keep the original order!
 *
 * Two messages are the same if they have the same message hash. See messageHash().
 * If one of the two is more precise then it replaces the other.
 * A message is more precise if it is contained in the other or if
 * the first does not have an endLine/endCol.
 *
 * @param {CSN.Message[]} messages
 */
function deduplicateMessages( messages ) {
  const seen = new Map();
  for (const msg of messages) {
    const hash = messageHash(msg);

    if (!seen.has(hash)) {
      seen.set(hash, msg);

    } else if (msg.$location) {
      const existing = seen.get(hash);
      // If this messages has an end but the existing does not, then the new message is more precise.
      // If both messages do (or don't) have an endLine, then compare them based on their location.
      // Assume that a message is more precise if it comes later (i.e. may be included in the other).
      if (msg.$location.endLine && !existing.$location.endLine ||
         (!msg.$location.endLine === !existing.$location.endLine && compareMessage(msg, existing) > 0)) {
        seen.set(hash, msg);
      }
    }
  }

  messages.length = 0;
  seen.forEach(msg => messages.push(msg));
}

function shortArtName( art ) {
  const { name } = art;
  if ([ 'select', 'action', 'alias', 'param' ].every( n => name[n] == null ) &&
      !name.absolute.includes(':'))
    return quote.name( name.element ? `${ name.absolute }:${ name.element }` : name.absolute );
  return artName( art );
}

function artName( art, omit ) {
  let name = art.name;
  let r = (name.absolute) ? [ quoted( name.absolute ) ] : [];
  if (name.select && name.select > 1 || name.select != null && art.kind !== 'element') // Yes, omit select:1 for element - TODO: re-check
    r.push( (art.kind === 'extend' ? 'block:' : 'query:') + name.select ); // TODO: rename to 'select:1' and consider whether there are more selects
  if (name.action && omit !== 'action')
    r.push( memberActionName(art) + ':' + quoted( name.action ) );
  if (name.alias)
    r.push( (art.kind === 'mixin' ? 'mixin:' : 'alias:') + quoted( name.alias ) )
  if (name.param != null && omit !== 'param')
    r.push( name.param ? 'param:' + quoted( name.param ) : 'returns' ); // TODO: join
  if (name.element && omit !== 'element')
    // r.push( `${ art.kind }: ${ quoted( name.element )}` ); or even better element:"assoc"/key:"i" same with enum
    r.push( (art.kind === 'enum' ? 'enum:' : 'element:') + quoted( name.element ) );
  return r.join('/');
}

function memberActionName( art ) {
  while (art && art._main) {
    if (art.kind === 'action' || art.kind === 'function')
      return art.kind;
    art = art._parent;
  }
  return 'action';
}

function homeName( art, absoluteOnly ) {
  if (!art)
    return art;
  if (art._outer)               // in returns / items property
    return homeName( art._outer, absoluteOnly );
  else if (art.kind === 'source' || !art.name) // error reported in parser or on source level
    return null;
  else if (art.kind === 'using')
    return 'using:' + quoted( art.name.id );
  else if (art.kind === 'extend')
    return !absoluteOnly && homeNameForExtend ( art );
  else if (art.name._artifact)             // block, extend, annotate
    return homeName( art.name._artifact, absoluteOnly ); // use corresponding definition
  else if (absoluteOnly)
    return art.name.absolute;
  else
    return (art._main ? art._main.kind : art.kind) + ':' + artName( art );
}

// The "home" for extensions is handled differently because `_artifact` is not
// set for unknown extensions and we could have nested extensions.
function homeNameForExtend( art ) {
  // TODO: fix the following - do like in collectArtifactExtensions() or
  // basically resolveUncheckedPath()
  const absoluteName = (art.name.id ? art.name.id :
      art.name.path.map(s => s && s.id).join('.'));

  // Surrounding parent may be another extension.
  const parent = art._parent;
  if (!parent)
    return 'extend:' + quoted(absoluteName);

  // And that extension's artifact could have been found.
  const parentArt = parent.name && parent.name._artifact;
  if (!parentArt)
    return artName(parent) + '/' + quoted(absoluteName);

  let extensionName;
  if (parentArt.enum || parentArt.elements) {
    const fakeArt = {
      kind: parentArt.enum ? 'enum' : 'element',
      name: { element: absoluteName }
    };
    extensionName = artName(fakeArt);
  }
  else {
    extensionName = 'extend:' + quoted(absoluteName);
  }
  // Even though the parent artifact was found, we use kind 'extend'
  // to make it clear that we are inside an (element) extension.
  return 'extend:' + artName(parentArt) + '/' + extensionName;
}

/**
 * Get the explanation string for the given message-id.
 *
 * @param {string} messageId
 * @returns {string}
 * @throws May throw an ENOENT error if the file cannot be found.
 * @see hasMessageExplanation()
 */
function explainMessage(messageId) {
  const filename = path.join(__dirname, '..', '..', 'share', 'messages', `${messageId}.md`);
  return fs.readFileSync(filename, 'utf8');
}

/**
 * Returns true if the given message has an explanation file.
 *
 * @param {string} messageId
 * @returns {boolean}
 */
function hasMessageExplanation(messageId) {
  return messageId && _messageIdsWithExplanation.includes(messageId);
}

/**
 * Returns an array of message IDs that have an explanation text.
 */
function messageIdsWithExplanation() {
  return _messageIdsWithExplanation;
}

module.exports = {
  hasErrors,
  weakLocation,
  locationString,
  messageString,
  messageStringMultiline,
  messageContext,
  searchName,
  makeMessageFunction,
  artName,
  handleMessages,
  sortMessages: (m => m.sort(compareMessage)),
  sortMessagesSeverityAware: (m => m.sort(compareMessageSeverityAware)),
  deduplicateMessages,
  CompileMessage,
  CompilationError,
  explainMessage,
  hasMessageExplanation,
  messageIdsWithExplanation,
};
