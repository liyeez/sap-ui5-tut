if (global.cds) Object.assign(module,{exports:global.cds}) ; else {

  const { extend, lazify, lazified } = require ('./lazy')
  const core = new class cds extends require('events'){}
  const c = lazy => cds.builtin.classes [lazy]
  require = lazified (module)  // eslint-disable-line

  /** cds is the central facade to all cds functions */
  const cds = module.exports = global.cds = extend (core) .with ({

    // Builtin types and classes
    builtin: require ('./core'),
    service: lazy => extend (cds.builtin.classes.service) .with (lazified ({
      bindings: require ('./connect/bindings'),
      factory: require('./serve/factory'),
      providers:[],
      impl: x=>x,
    })),
    Association:c, Composition:c,
    entity:c,
    event:c,
    type:c,
    array:c,
    struct:c,

    // Model Reflection
    reflect: require ('./core/reflect'),
    linked: require ('./core/reflect'),
    infer: require ('./core/infer'),

    // Loading and Compiling Models
    model: undefined,
    resolve: require ('./compile/resolve'),
    load: require ('./compile/load'), get: lazy => cds.load.parsed,
    parse: require ('./compile/parse'),
    compile: require ('./compile'),
    compiler: require ('./compile/cdsc'),
    deploy: require ('./deploy'),

    // Providing and Consuming Services
    services: Object.defineProperties (new class Services {
      *[Symbol.iterator]() {for (let e in this) yield this[e]}
    }, { _pending:{value:{}} }),
    serve: require ('./serve'),
    server: require ('../server'),
    connect: require ('./connect'),

    // Core Services API
    Service: require ('./serve/Service-api'),
    ApplicationService: lazy => module.require('@sap/cds-runtime/lib/cds-services/services/Service.js'),
    MessagingService: lazy => module.require('@sap/cds-runtime/lib/messaging/service.js'),
    DatabaseService: lazy => module.require('@sap/cds-runtime/lib/db/Service.js'),
    RemoteService: lazy => module.require('@sap/cds-runtime/lib/rest/service.js'),
    Request: require ('./req/impl'),
    Event: require ('./req/event'),
    User: require ('./req/user'),
    ql: require ('./ql'),

    // Helpers
    localize: require ('./i18n/localize'),
    error: require ('./log/errors'),
    utils: require ('./utils'),
    test: require ('./utils/tests'),
    log: require ('./log'), debug: lazy => cds.log.debug,
    exec: require ('../bin/cds'),
    clone: m => JSON.parse (JSON.stringify(m)),
    lazified, lazify, extend,

    // Configuration & Information
    env: require('./env'), get requires(){ return this.env.requires }, // shortcut
    version: lazy => module.require('../package.json').version,
    home: lazy => __dirname.slice(0,-4),
    root: lazy => process.cwd(),

    /** @type {import './req/impl'} */
    get context(){ return module.require('./req/context').for(this) },
    set context(_){ module.require('./req/context').for(this,_) },
  })

  /** @type {import './serve/Service-api'} */
  const _missing = new Proxy ({},{ get:function _(t,p){ cds.error.no_primary_db(p,_) }})
  let db = _missing, _db = undefined
  extend (cds.__proto__) .with ({

    set db(v) { db = (_db=v) || _missing; if(v) {
      super.tx = db.tx.bind(db)
      super.run = db.run.bind(db)
      super.read = db.read.bind(db)
      super.insert = db.insert.bind(db)
      super.update = db.update.bind(db)
      super.delete = db.delete.bind(db)
    } else {
      super.tx = ()=>db.tx()
      super.run = ()=>db.run()
      super.read = ()=>db.read()
      super.insert = ()=>db.insert()
      super.update = ()=>db.update()
      super.delete = ()=>db.delete()
    }},

    get db() { return _db },
    get entities() { return db.entities },
    tx(..._) { return db.tx(..._) },
    run(..._) { return db.run(..._) },
    foreach(..._) { return db.foreach(..._) },
    stream(..._) { return db.stream(..._) },
    read(..._) { return db.read(..._) },
    insert(..._) { return db.insert(..._) },
    update(..._) { return db.update(..._) },
    delete(..._) { return db.delete(..._) },
    disconnect(..._) { return db.disconnect(..._) }

  })

  // legacy and to be moved stuff -> hidden for tools in cds.__proto__
  extend (cds.__proto__) .with (lazified ({
    /** @deprecated */ transaction(..._) { return this.db.transaction(..._) },
    /** @deprecated */ in: (cwd) => !cwd ? cds : {__proto__:cds, cwd, env: cds.env.for('cds',cwd) },
    /** @deprecated */ get config() { return this.env }, // REVISIT: Remove after November release
    get alpha_localized() { return module.require('./compile/etc/_localized') },
    mtx: require('../bin/build/mtx/in-cds'),
    build: require('../bin/build'),
  }))

  // Add global forwards to cds.ql and cds.parse
  const odp = Object.defineProperty, _global = (_,...pp) => pp.forEach (p => odp(global,p,{
    configurable:true, get:()=>{ let v=cds[_][p]; odp(this,p,{value:v}); return v }
  }))
  _global ('ql','SELECT','INSERT','UPDATE','DELETE','CREATE','DROP')
  _global ('parse','CDL','CQL','CXL')



  // Check Node.js version
  const nodeCheck = process.env.CDS_STRICT_NODE_VERSION !== 'false'
      && !process.env['WORKSPACE_ID'] // FIXME remove as soon as BAS is ready for the Node version check below
  if (nodeCheck) {
    const [,major,minor] = /v(\d+)\.(\d+)/.exec (process.version)
    const required = 12.18, [maj,min] = (required+'').split('.')
    // eslint-disable-next-line no-console
    if (+major < +maj || +major === +maj && +minor < +min) process.exit (console.error (`
    Node.js v${required} or higher is required for @sap/cds ${cds.version}.
    Current v${major}.${minor} does not satisfy this.
    `) || 1)
  }

}