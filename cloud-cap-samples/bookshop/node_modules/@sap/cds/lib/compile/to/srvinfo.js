
const cds = require('../..')
const { isfile, path: {join, normalize} } = cds.utils

// Produces information on provided services in the model:
//   name, expected URL path at runtime,...
module.exports = (model) => {

  const java_prefix = _java_prefix(model)
  const path4 = java_prefix ? _java_path : cds.serve.path4

  return cds.linked(model) .all ('service').map (service => ({
    name: service.name,
    urlPath: _url4 (service, model), // the URL path that is *likely* effective at runtime
    destination: 'srv-api' // the name to register in xs-app.json.  TODO align this w/ deployment manifest
  }))

  function _url4 (service) {
    const p = path4(service)
    return normalize (p.replace(/^\/+/, '') + '/') //> /foo/bar  ->  foo/bar/
  }

  function _java_path (service) {
    const d = model.definitions[service.name]
    const path = d && d['@path'] ? d['@path'].replace(/^[^/]/, c => '/'+c) : service.name
    return join(java_prefix, path).replace(/\\/g, '/')
  }

  function _java_prefix() {
    let is_java
    for (let s of model.$sources) {
      const file = isfile (join (s,'../src/main/resources/application.yaml'))
      if (file) {
        const yaml = cds.load.yaml(file)
        for (let {cds} of Array.isArray(yaml) ? yaml : [yaml]) {
          if (cds) return cds['odata-v4.endpoint.path'] || cds['odata-v2.endpoint.path']
        }
        return 'odata/v4/'
      }
      else if (isfile (join(s,'../pom.xml'))) is_java = true
    }
    return is_java && 'odata/v4/'
  }

}
